// Code generated by ent, DO NOT EDIT.

package car

import (
	"entgo.io/ent/dialect/sql"
	"github.com/bytectl/enterd/examples/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldID, id))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNickname, v))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldBrand, v))
}

// ModelYear applies equality check predicate on the "model_year" field. It's identical to ModelYearEQ.
func ModelYear(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModelYear, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldNickname, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldBrand, v))
}

// ModelYearEQ applies the EQ predicate on the "model_year" field.
func ModelYearEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModelYear, v))
}

// ModelYearNEQ applies the NEQ predicate on the "model_year" field.
func ModelYearNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldModelYear, v))
}

// ModelYearIn applies the In predicate on the "model_year" field.
func ModelYearIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldModelYear, vs...))
}

// ModelYearNotIn applies the NotIn predicate on the "model_year" field.
func ModelYearNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldModelYear, vs...))
}

// ModelYearGT applies the GT predicate on the "model_year" field.
func ModelYearGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldModelYear, v))
}

// ModelYearGTE applies the GTE predicate on the "model_year" field.
func ModelYearGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldModelYear, v))
}

// ModelYearLT applies the LT predicate on the "model_year" field.
func ModelYearLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldModelYear, v))
}

// ModelYearLTE applies the LTE predicate on the "model_year" field.
func ModelYearLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldModelYear, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Car) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		p(s.Not())
	})
}
